// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2023 20:55:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp5_vlg_sample_tst(
	DATA_INPUT,
	M,
	RA,
	clk,
	clr,
	rd,
	wr,
	sampler_tx
);
input [7:0] DATA_INPUT;
input [1:0] M;
input [1:0] RA;
input  clk;
input  clr;
input  rd;
input  wr;
output sampler_tx;

reg sample;
time current_time;
always @(DATA_INPUT or M or RA or clk or clr or rd or wr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp5_vlg_check_tst (
	N,
	PC,
	R0,
	R1,
	R2,
	R3,
	codeout,
	sampler_rx
);
input [31:0] N;
input [7:0] PC;
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] R3;
input [7:0] codeout;
input sampler_rx;

reg [31:0] N_expected;
reg [7:0] PC_expected;
reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] R3_expected;
reg [7:0] codeout_expected;

reg [31:0] N_prev;
reg [7:0] PC_prev;
reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] R3_prev;
reg [7:0] codeout_prev;

reg [31:0] N_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] R3_expected_prev;
reg [7:0] codeout_expected_prev;

reg [31:0] last_N_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_R3_exp;
reg [7:0] last_codeout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	N_prev = N;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	codeout_prev = codeout;
end

// update expected /o prevs

always @(trigger)
begin
	N_expected_prev = N_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	codeout_expected_prev = codeout_expected;
end


// expected N[ 31 ]
initial
begin
	N_expected[31] = 1'bX;
end 
// expected N[ 30 ]
initial
begin
	N_expected[30] = 1'bX;
end 
// expected N[ 29 ]
initial
begin
	N_expected[29] = 1'bX;
end 
// expected N[ 28 ]
initial
begin
	N_expected[28] = 1'bX;
end 
// expected N[ 27 ]
initial
begin
	N_expected[27] = 1'bX;
end 
// expected N[ 26 ]
initial
begin
	N_expected[26] = 1'bX;
end 
// expected N[ 25 ]
initial
begin
	N_expected[25] = 1'bX;
end 
// expected N[ 24 ]
initial
begin
	N_expected[24] = 1'bX;
end 
// expected N[ 23 ]
initial
begin
	N_expected[23] = 1'bX;
end 
// expected N[ 22 ]
initial
begin
	N_expected[22] = 1'bX;
end 
// expected N[ 21 ]
initial
begin
	N_expected[21] = 1'bX;
end 
// expected N[ 20 ]
initial
begin
	N_expected[20] = 1'bX;
end 
// expected N[ 19 ]
initial
begin
	N_expected[19] = 1'bX;
end 
// expected N[ 18 ]
initial
begin
	N_expected[18] = 1'bX;
end 
// expected N[ 17 ]
initial
begin
	N_expected[17] = 1'bX;
end 
// expected N[ 16 ]
initial
begin
	N_expected[16] = 1'bX;
end 
// expected N[ 15 ]
initial
begin
	N_expected[15] = 1'bX;
end 
// expected N[ 14 ]
initial
begin
	N_expected[14] = 1'bX;
end 
// expected N[ 13 ]
initial
begin
	N_expected[13] = 1'bX;
end 
// expected N[ 12 ]
initial
begin
	N_expected[12] = 1'bX;
end 
// expected N[ 11 ]
initial
begin
	N_expected[11] = 1'bX;
end 
// expected N[ 10 ]
initial
begin
	N_expected[10] = 1'bX;
end 
// expected N[ 9 ]
initial
begin
	N_expected[9] = 1'bX;
end 
// expected N[ 8 ]
initial
begin
	N_expected[8] = 1'bX;
end 
// expected N[ 7 ]
initial
begin
	N_expected[7] = 1'bX;
end 
// expected N[ 6 ]
initial
begin
	N_expected[6] = 1'bX;
end 
// expected N[ 5 ]
initial
begin
	N_expected[5] = 1'bX;
end 
// expected N[ 4 ]
initial
begin
	N_expected[4] = 1'bX;
end 
// expected N[ 3 ]
initial
begin
	N_expected[3] = 1'bX;
end 
// expected N[ 2 ]
initial
begin
	N_expected[2] = 1'bX;
end 
// expected N[ 1 ]
initial
begin
	N_expected[1] = 1'bX;
end 
// expected N[ 0 ]
initial
begin
	N_expected[0] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// expected codeout[ 7 ]
initial
begin
	codeout_expected[7] = 1'bX;
end 
// expected codeout[ 6 ]
initial
begin
	codeout_expected[6] = 1'bX;
end 
// expected codeout[ 5 ]
initial
begin
	codeout_expected[5] = 1'bX;
end 
// expected codeout[ 4 ]
initial
begin
	codeout_expected[4] = 1'bX;
end 
// expected codeout[ 3 ]
initial
begin
	codeout_expected[3] = 1'bX;
end 
// expected codeout[ 2 ]
initial
begin
	codeout_expected[2] = 1'bX;
end 
// expected codeout[ 1 ]
initial
begin
	codeout_expected[1] = 1'bX;
end 
// expected codeout[ 0 ]
initial
begin
	codeout_expected[0] = 1'bX;
end 
// generate trigger
always @(N_expected or N or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or codeout_expected or codeout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected N = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected codeout = %b | ",N_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,codeout_expected_prev);
	$display("| real N = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | real codeout = %b | ",N_prev,PC_prev,R0_prev,R1_prev,R2_prev,R3_prev,codeout_prev);
`endif
	if (
		( N_expected_prev[0] !== 1'bx ) && ( N_prev[0] !== N_expected_prev[0] )
		&& ((N_expected_prev[0] !== last_N_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[0] = N_expected_prev[0];
	end
	if (
		( N_expected_prev[1] !== 1'bx ) && ( N_prev[1] !== N_expected_prev[1] )
		&& ((N_expected_prev[1] !== last_N_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[1] = N_expected_prev[1];
	end
	if (
		( N_expected_prev[2] !== 1'bx ) && ( N_prev[2] !== N_expected_prev[2] )
		&& ((N_expected_prev[2] !== last_N_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[2] = N_expected_prev[2];
	end
	if (
		( N_expected_prev[3] !== 1'bx ) && ( N_prev[3] !== N_expected_prev[3] )
		&& ((N_expected_prev[3] !== last_N_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[3] = N_expected_prev[3];
	end
	if (
		( N_expected_prev[4] !== 1'bx ) && ( N_prev[4] !== N_expected_prev[4] )
		&& ((N_expected_prev[4] !== last_N_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[4] = N_expected_prev[4];
	end
	if (
		( N_expected_prev[5] !== 1'bx ) && ( N_prev[5] !== N_expected_prev[5] )
		&& ((N_expected_prev[5] !== last_N_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[5] = N_expected_prev[5];
	end
	if (
		( N_expected_prev[6] !== 1'bx ) && ( N_prev[6] !== N_expected_prev[6] )
		&& ((N_expected_prev[6] !== last_N_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[6] = N_expected_prev[6];
	end
	if (
		( N_expected_prev[7] !== 1'bx ) && ( N_prev[7] !== N_expected_prev[7] )
		&& ((N_expected_prev[7] !== last_N_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[7] = N_expected_prev[7];
	end
	if (
		( N_expected_prev[8] !== 1'bx ) && ( N_prev[8] !== N_expected_prev[8] )
		&& ((N_expected_prev[8] !== last_N_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[8] = N_expected_prev[8];
	end
	if (
		( N_expected_prev[9] !== 1'bx ) && ( N_prev[9] !== N_expected_prev[9] )
		&& ((N_expected_prev[9] !== last_N_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[9] = N_expected_prev[9];
	end
	if (
		( N_expected_prev[10] !== 1'bx ) && ( N_prev[10] !== N_expected_prev[10] )
		&& ((N_expected_prev[10] !== last_N_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[10] = N_expected_prev[10];
	end
	if (
		( N_expected_prev[11] !== 1'bx ) && ( N_prev[11] !== N_expected_prev[11] )
		&& ((N_expected_prev[11] !== last_N_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[11] = N_expected_prev[11];
	end
	if (
		( N_expected_prev[12] !== 1'bx ) && ( N_prev[12] !== N_expected_prev[12] )
		&& ((N_expected_prev[12] !== last_N_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[12] = N_expected_prev[12];
	end
	if (
		( N_expected_prev[13] !== 1'bx ) && ( N_prev[13] !== N_expected_prev[13] )
		&& ((N_expected_prev[13] !== last_N_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[13] = N_expected_prev[13];
	end
	if (
		( N_expected_prev[14] !== 1'bx ) && ( N_prev[14] !== N_expected_prev[14] )
		&& ((N_expected_prev[14] !== last_N_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[14] = N_expected_prev[14];
	end
	if (
		( N_expected_prev[15] !== 1'bx ) && ( N_prev[15] !== N_expected_prev[15] )
		&& ((N_expected_prev[15] !== last_N_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[15] = N_expected_prev[15];
	end
	if (
		( N_expected_prev[16] !== 1'bx ) && ( N_prev[16] !== N_expected_prev[16] )
		&& ((N_expected_prev[16] !== last_N_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[16] = N_expected_prev[16];
	end
	if (
		( N_expected_prev[17] !== 1'bx ) && ( N_prev[17] !== N_expected_prev[17] )
		&& ((N_expected_prev[17] !== last_N_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[17] = N_expected_prev[17];
	end
	if (
		( N_expected_prev[18] !== 1'bx ) && ( N_prev[18] !== N_expected_prev[18] )
		&& ((N_expected_prev[18] !== last_N_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[18] = N_expected_prev[18];
	end
	if (
		( N_expected_prev[19] !== 1'bx ) && ( N_prev[19] !== N_expected_prev[19] )
		&& ((N_expected_prev[19] !== last_N_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[19] = N_expected_prev[19];
	end
	if (
		( N_expected_prev[20] !== 1'bx ) && ( N_prev[20] !== N_expected_prev[20] )
		&& ((N_expected_prev[20] !== last_N_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[20] = N_expected_prev[20];
	end
	if (
		( N_expected_prev[21] !== 1'bx ) && ( N_prev[21] !== N_expected_prev[21] )
		&& ((N_expected_prev[21] !== last_N_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[21] = N_expected_prev[21];
	end
	if (
		( N_expected_prev[22] !== 1'bx ) && ( N_prev[22] !== N_expected_prev[22] )
		&& ((N_expected_prev[22] !== last_N_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[22] = N_expected_prev[22];
	end
	if (
		( N_expected_prev[23] !== 1'bx ) && ( N_prev[23] !== N_expected_prev[23] )
		&& ((N_expected_prev[23] !== last_N_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[23] = N_expected_prev[23];
	end
	if (
		( N_expected_prev[24] !== 1'bx ) && ( N_prev[24] !== N_expected_prev[24] )
		&& ((N_expected_prev[24] !== last_N_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[24] = N_expected_prev[24];
	end
	if (
		( N_expected_prev[25] !== 1'bx ) && ( N_prev[25] !== N_expected_prev[25] )
		&& ((N_expected_prev[25] !== last_N_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[25] = N_expected_prev[25];
	end
	if (
		( N_expected_prev[26] !== 1'bx ) && ( N_prev[26] !== N_expected_prev[26] )
		&& ((N_expected_prev[26] !== last_N_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[26] = N_expected_prev[26];
	end
	if (
		( N_expected_prev[27] !== 1'bx ) && ( N_prev[27] !== N_expected_prev[27] )
		&& ((N_expected_prev[27] !== last_N_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[27] = N_expected_prev[27];
	end
	if (
		( N_expected_prev[28] !== 1'bx ) && ( N_prev[28] !== N_expected_prev[28] )
		&& ((N_expected_prev[28] !== last_N_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[28] = N_expected_prev[28];
	end
	if (
		( N_expected_prev[29] !== 1'bx ) && ( N_prev[29] !== N_expected_prev[29] )
		&& ((N_expected_prev[29] !== last_N_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[29] = N_expected_prev[29];
	end
	if (
		( N_expected_prev[30] !== 1'bx ) && ( N_prev[30] !== N_expected_prev[30] )
		&& ((N_expected_prev[30] !== last_N_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[30] = N_expected_prev[30];
	end
	if (
		( N_expected_prev[31] !== 1'bx ) && ( N_prev[31] !== N_expected_prev[31] )
		&& ((N_expected_prev[31] !== last_N_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[31] = N_expected_prev[31];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( codeout_expected_prev[0] !== 1'bx ) && ( codeout_prev[0] !== codeout_expected_prev[0] )
		&& ((codeout_expected_prev[0] !== last_codeout_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[0] = codeout_expected_prev[0];
	end
	if (
		( codeout_expected_prev[1] !== 1'bx ) && ( codeout_prev[1] !== codeout_expected_prev[1] )
		&& ((codeout_expected_prev[1] !== last_codeout_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[1] = codeout_expected_prev[1];
	end
	if (
		( codeout_expected_prev[2] !== 1'bx ) && ( codeout_prev[2] !== codeout_expected_prev[2] )
		&& ((codeout_expected_prev[2] !== last_codeout_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[2] = codeout_expected_prev[2];
	end
	if (
		( codeout_expected_prev[3] !== 1'bx ) && ( codeout_prev[3] !== codeout_expected_prev[3] )
		&& ((codeout_expected_prev[3] !== last_codeout_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[3] = codeout_expected_prev[3];
	end
	if (
		( codeout_expected_prev[4] !== 1'bx ) && ( codeout_prev[4] !== codeout_expected_prev[4] )
		&& ((codeout_expected_prev[4] !== last_codeout_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[4] = codeout_expected_prev[4];
	end
	if (
		( codeout_expected_prev[5] !== 1'bx ) && ( codeout_prev[5] !== codeout_expected_prev[5] )
		&& ((codeout_expected_prev[5] !== last_codeout_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[5] = codeout_expected_prev[5];
	end
	if (
		( codeout_expected_prev[6] !== 1'bx ) && ( codeout_prev[6] !== codeout_expected_prev[6] )
		&& ((codeout_expected_prev[6] !== last_codeout_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[6] = codeout_expected_prev[6];
	end
	if (
		( codeout_expected_prev[7] !== 1'bx ) && ( codeout_prev[7] !== codeout_expected_prev[7] )
		&& ((codeout_expected_prev[7] !== last_codeout_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port codeout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", codeout_expected_prev);
		$display ("     Real value = %b", codeout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_codeout_exp[7] = codeout_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] DATA_INPUT;
reg [1:0] M;
reg [1:0] RA;
reg clk;
reg clr;
reg rd;
reg wr;
// wires                                               
wire [31:0] N;
wire [7:0] PC;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;
wire [7:0] codeout;

wire sampler;                             

// assign statements (if any)                          
exp5 i1 (
// port map - connection between master ports and signals/registers   
	.DATA_INPUT(DATA_INPUT),
	.M(M),
	.N(N),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.RA(RA),
	.clk(clk),
	.clr(clr),
	.codeout(codeout),
	.rd(rd),
	.wr(wr)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// DATA_INPUT[ 7 ]
initial
begin
	DATA_INPUT[7] = 1'b1;
end 
// DATA_INPUT[ 6 ]
initial
begin
	DATA_INPUT[6] = 1'b0;
end 
// DATA_INPUT[ 5 ]
initial
begin
	DATA_INPUT[5] = 1'b1;
end 
// DATA_INPUT[ 4 ]
initial
begin
	DATA_INPUT[4] = 1'b1;
end 
// DATA_INPUT[ 3 ]
initial
begin
	DATA_INPUT[3] = 1'b0;
end 
// DATA_INPUT[ 2 ]
initial
begin
	DATA_INPUT[2] = 1'b1;
end 
// DATA_INPUT[ 1 ]
initial
begin
	DATA_INPUT[1] = 1'b0;
end 
// DATA_INPUT[ 0 ]
initial
begin
	DATA_INPUT[0] = 1'b1;
end 
// RA[ 1 ]
initial
begin
	RA[1] = 1'b0;
	RA[1] = #150000 1'b1;
	RA[1] = #220000 1'b0;
	RA[1] = #470000 1'b1;
	RA[1] = #130000 1'b0;
end 
// RA[ 0 ]
initial
begin
	RA[0] = 1'b0;
	RA[0] = #570000 1'b1;
	RA[0] = #150000 1'b0;
	RA[0] = #120000 1'b1;
	RA[0] = #130000 1'b0;
end 
// M[ 1 ]
initial
begin
	M[1] = 1'b0;
	M[1] = #500000 1'b1;
	M[1] = #120000 1'b0;
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b0;
	M[0] = #210000 1'b1;
	M[0] = #170000 1'b0;
end 

// rd
initial
begin
	rd = 1'b1;
end 

// wr
initial
begin
	wr = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

exp5_vlg_sample_tst tb_sample (
	.DATA_INPUT(DATA_INPUT),
	.M(M),
	.RA(RA),
	.clk(clk),
	.clr(clr),
	.rd(rd),
	.wr(wr),
	.sampler_tx(sampler)
);

exp5_vlg_check_tst tb_out(
	.N(N),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.codeout(codeout),
	.sampler_rx(sampler)
);
endmodule

